package com.wh.controller.msp;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import com.wh.base.AjaxJson;
import com.wh.constants.Constants;
import com.wh.controller.common.BaseController;
import com.wh.mspentity.MspAttachements;
import com.wh.mspentity.MspPhoto;
import com.wh.mspentity.MspReply;
import com.wh.service.msp.MspAttachementsService;
import com.wh.service.msp.MspPhotoService;
import com.wh.service.msp.MspReplyService;
import com.wh.service.msp.MspUserService;
import com.wh.util.DateUtil;
import com.wh.util.FileUtil;
import com.wh.util.MyFileUploadException;
import com.wh.util.StringUtil;
import com.wh.util.UUIDUtil;

/**
 * 随手拍
 * 
 * @author Administrator Leo
 *
 */
@Controller
@RequestMapping("/msp/mspPhoto")
public class MspPhotoController extends BaseController {

	@Resource
	private MspUserService mspUserService;
	@Resource
	private MspPhotoService mspPhotoService;
	@Resource
	private MspAttachementsService mspAttachementsService;
	@Resource
	private MspReplyService mspReplyService;

	private Logger log = LoggerFactory.getLogger(this.getClass());

	/**
	 * 上传保存随手拍信息
	 * 
	 * @param req
	 * @param resp
	 * @param mspPhoto
	 * @return
	 */
	@RequestMapping(value = "/wx/savePhoto.htm", method = { RequestMethod.POST, RequestMethod.GET })
	@ResponseBody
	public AjaxJson savePhoto(HttpServletRequest req, HttpServletResponse resp, MspPhoto mspPhoto) {
		AjaxJson json = new AjaxJson();
		boolean flag = false;
		String path = "/resource/upload/msp/" + DateUtil.format(new Date(), "yyyyMM") + "/";
		List<String> fileList = null;
		try {
			// 得到服务器存储路径List
			fileList = FileUtil.uploadFiles4SpringMVC(req, path, Constants.img_allow_type, 5);
		} catch (MyFileUploadException e) {

			log.error("随手拍上传图片出错:" + e.toString());
		}
		// 存储随手拍信息
		mspPhoto.setCreateTime(new Date());
		mspPhoto.setId(UUIDUtil.getUUID());

		flag = mspPhotoService.save(mspPhoto);
		if (flag) {
			// 存储图片信息
			if (fileList != null && fileList.size() > 0) {
				for (String uploadUrl : fileList) {
					String type = uploadUrl.substring(uploadUrl.lastIndexOf(".") + 1).toLowerCase();
					MspAttachements mspAttachements = new MspAttachements();
					mspAttachements.setLinkId(mspPhoto.getId());
					mspAttachements.setFileType(type);
					mspAttachements.setFilePath(uploadUrl);
					mspAttachements.setCreateTime(new Date());
					flag = mspAttachementsService.save(mspAttachements);
					if (!flag) {
						json.setMsg("保存随手拍图片失败!");
						return json;
					}
				}

			}
		} else {
			json.setMsg("保存随手拍信息失败!");
			return json;
		}
		return json;
	}

	/**
	 * 随手拍首页展示页面
	 * 
	 * @param req
	 * @param resp
	 * @param type
	 *            1:热门, 2:最新 默认为1
	 * @return
	 */
	@RequestMapping(value = "/wx/showList.htm", method = { RequestMethod.POST, RequestMethod.GET })
	@ResponseBody
	public AjaxJson showList(HttpServletRequest req, HttpServletResponse resp, Integer type) {
		AjaxJson json = new AjaxJson();
		if (type == null) {
			type = 1;
		}
		List<Map<String, Object>> mapList = mspPhotoService.showList(type);
		json.setObj(mapList);
		return json;
	}

	/**
	 * 随手拍详情页
	 * 
	 * @param req
	 * @param resp
	 * @param photoId
	 *            随手拍id
	 * @return
	 */
	@RequestMapping(value = "/wx/showInfo.htm", method = { RequestMethod.POST, RequestMethod.GET })
	@ResponseBody
	public AjaxJson showInfo(HttpServletRequest req, HttpServletResponse resp, String photoId) {
		AjaxJson json = new AjaxJson();
		boolean flag = false;

		// photoId = "e394f34c9acf45b8831b01afca648811";

		Map<String, Object> map = new HashMap<String, Object>();
		if (StringUtil.isNotEmpty(photoId)) {

			// 每请求一次详情页方法,浏览量加一
			flag = mspPhotoService.updatePageviewNum(photoId);
			if (flag) {

				// 获取随手拍及个人信息部分
				Map<String, Object> mspPhotoMap = mspPhotoService.getShowInfoByPhotoId(photoId);
				json.setObj(mspPhotoMap);
				// 获取图片部分
				List<String> photoUrlList = mspAttachementsService.getPhotoUrlListByLinkId(photoId);
				if (photoUrlList != null && photoUrlList.size() > 0) {
					map.put("photoUrlList", photoUrlList);
				}
				// 获取评论部分

				List<Map<String, Object>> replyList = mspReplyService.getReplyListByPhotoId(photoId);

				if (replyList != null && replyList.size() > 0) {
					map.put("replyList", replyList);

					map.put("replyNum", replyList.size());
				}
			} else {
				json.setMsg("请求一次详情页方法,浏览量加一失败");
			}
		} else {
			json.setMsg("传入的photoId不能为空");
		}
		json.setAttributes(map);
		return json;
	}

	/**
	 * 发送评论或回复 区别在toUserid是否为null
	 * 
	 * @param req
	 * @param resp
	 * @param MspReply
	 * @return
	 */
	@RequestMapping(value = "/wx/sendReply.htm", method = { RequestMethod.POST, RequestMethod.GET })
	@ResponseBody
	public AjaxJson sendReply(HttpServletRequest req, HttpServletResponse resp, MspReply mspReply) {
		AjaxJson json = new AjaxJson();
		boolean flag = false;

		/*mspReply.setFromUserid("e394f34c9acf45b8831b01afca648899");
		mspReply.setPhotoId("e394f34c9acf45b8831b01afca648811");
		mspReply.setToUserid("e394f34c9acf45b8831b01afca648810");
		mspReply.setMsg("me too");*/

		if (mspReply != null) {
			mspReply.setCreateTime(new Date());
			flag = mspReplyService.save(mspReply);
			if (!flag) {
				json.setMsg("保存发表的评论失败,出现异常");
			}
		} else {
			json.setMsg("未传参或参数不对");
		}
		return json;
	}

}
