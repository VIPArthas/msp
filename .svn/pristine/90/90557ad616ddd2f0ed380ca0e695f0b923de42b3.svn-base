package com.wh.controller.msp;



import javax.annotation.Resource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import com.wh.base.AjaxJson;
import com.wh.mspentity.MspPlatform;
import com.wh.service.msp.MspPlatformService;
import com.wh.util.msp.Constants;
import com.wh.util.msp.EnumMethod;
import com.wh.util.msp.HttpRequestUtil;
import net.sf.json.JSONObject;

/**
 * 消息推送
 * @author Administrator
 *
 */
@Controller
@RequestMapping("/msp/mspMessage")
public class MspMessageController {

	private Logger log = LoggerFactory.getLogger(this.getClass());

	// 标签

	@Resource
	private MspPlatformService mspPlatformService;
	// 发送接口

	/**
	 * text消息 在有"的前面转义
	 * 
	 * @param touser
	 *            UserID列表（消息接收者，多个接收者用‘|’分隔）。特殊情况：指定为@all，则向关注该企业应用的全部成员发送————
	 *            "touser": "UserID1|UserID2|UserID3"
	 * @param toparty
	 *            PartyID列表，部门ID列表,多个接受者用‘|’分隔。当touser为@all时忽略本参数————"toparty":
	 *            " PartyID1 | PartyID2 "
	 * @param totag
	 *            TagID列表，多个接受者用‘|’分隔。当touser为@all时忽略本参数————"totag":
	 *            " TagID1 | TagID2 "
	 * @param msgtype
	 *            消息类型，此时固定为：text
	 * @param agentid
	 *            企业应用的id，整型。可在应用的设置页面查看
	 * @param content
	 *            消息内容
	 * @param safe
	 *            表示是否是保密消息，0表示否，1表示是，默认0
	 */
	public static String STextMsg(String touser, String toparty, String totag, String agentid, String content) {

		String PostData = "{\"agentid\":%s,\"touser\": \"%s\",\"toparty\": \"%s\",\"totag\": \"%s\","
				+ "\"msgtype\":\"%s\",\"text\": {\"content\": \"%s\"},\"safe\":0}";

		// %s 文本替代
		String outputStr = String.format(PostData, agentid, touser, toparty, totag, "text", content);

		return outputStr;
	}

	/**
	 * 消息推送
	 * @param touser
	 *            用户userId
	 * @param toparty
	 * @param totag
	 *            标签
	 * @param content
	 *            发送内容
	 * @return
	 */
	@RequestMapping(value = "/web/sendMessage.htm", method = { RequestMethod.POST, RequestMethod.GET })
	@ResponseBody
	public AjaxJson sendMessage(String touser, String toparty, String totag, String content) {
		AjaxJson json = new AjaxJson();
		boolean flag=false;
		MspPlatform mspPlatform = mspPlatformService.load(Constants.MSPPLATFORMID);

		String agentid = String.valueOf(Constants.MSPAGENTID);
		String accessToken = mspPlatform.getAccessToken();
		// Post的数据
		String PostData = STextMsg(touser, toparty, totag, agentid, content);
		log.info("MSP 发送消息POST数据---->PostData:" + PostData);
		JSONObject jsonObject = null;
		String requestUrl = Constants.SEND_MESSAGE_URL;
		requestUrl = requestUrl.replace("ACCESS_TOKEN", accessToken);
		jsonObject = HttpRequestUtil.httpRequest(requestUrl, EnumMethod.POST.name(), PostData);
		int errcode=jsonObject.getInt("errcode");
		if (errcode==0) {
			flag=true;
			//将发送的信息保存在本地
		}else{
			json.setMsg(jsonObject.getString("errmsg"));
			// 发送信息失败 
            log.error("发送信息失败  errcode:{} errmsg:{}", errcode, jsonObject.getString("errmsg"));    
		}
		return json;
	}

}
