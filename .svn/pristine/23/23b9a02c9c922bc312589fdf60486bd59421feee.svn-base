package com.wh.controller.msp;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.wh.base.AjaxJson;
import com.wh.base.PageBounds;
import com.wh.controller.common.BaseController;
import com.wh.mspentity.MspDepartment;
import com.wh.mspentity.MspPlatform;
import com.wh.mspentity.MspUser;
import com.wh.service.msp.MspPlatformService;
import com.wh.service.msp.MspUserService;
import com.wh.util.HttpClient;
import com.wh.util.StringUtil;
import com.wh.util.UUIDUtil;
import com.wh.util.msp.Constants;
import com.wh.util.msp.EnumMethod;
import com.wh.util.msp.HttpRequestUtil;
import com.wh.xyfentity.XyfUser;

import net.sf.json.JSONObject;

/**
 * 企业号用户管理
 * 
 * @author Administrator Leo
 *
 */
@Controller
@RequestMapping("/msp/mspUser")
public class MspUserController extends BaseController {

	@Resource
	private MspPlatformService mspPlatformService;
	@Resource
	private MspUserService mspUserService;

	private Logger log = LoggerFactory.getLogger(this.getClass());

	/**
	 * 获取组织架构
	 * 
	 * @param req
	 * @param resp
	 * @return
	 */
	@RequestMapping(value = "/web/DepList.htm", method = { RequestMethod.POST, RequestMethod.GET })
	@ResponseBody
	public AjaxJson DepList(HttpServletRequest req, HttpServletResponse resp) {
		AjaxJson json = new AjaxJson();
		JSONObject jsonObject = null;
		MspPlatform mspPlatform = mspPlatformService.load(Constants.ALPLATFORMID);
		String requestUrl = Constants.DEPARTMENT_LIST_URL;
		String accessToken = mspPlatform.getAccessToken();
		if (StringUtil.isNotEmpty(accessToken)) {
			requestUrl = requestUrl.replace("ACCESS_TOKEN", accessToken);

			jsonObject = HttpRequestUtil.httpRequest(requestUrl, EnumMethod.GET.name(), null);

			if (jsonObject == null) {
				jsonObject = HttpRequestUtil.httpRequest(requestUrl, EnumMethod.GET.name(), null);
			}
			// 如果请求成功
			if (null != jsonObject) {

				int errcode = jsonObject.getInt("errcode");
				if (errcode == 0) {
					List<MspDepartment> departmentList = (List<MspDepartment>) jsonObject.get("department");
					json.setObj(departmentList);
				} else {
					log.error("获取部门list errcode:{} errmsg:{}", jsonObject.getInt("errcode"),
							jsonObject.getString("errmsg"));
				}
			}
		} else {
			log.info("根据accesstoken获取部门list:accessToken获取为空!");
		}

		return json;
	}

	/**
	 * 获取某个部门下用户数据
	 * 
	 * @param req
	 * @param resp
	 * @param map
	 * @return
	 */

	public List<Map<String, Object>> GetDepMemberListFromQiYe(HttpServletRequest req, HttpServletResponse resp) {
		String depID = req.getParameter("depID");
		if (StringUtil.isEmpty(depID)) {
			depID = "1";
		}

		JSONObject jsonObject = null;
		List<Map<String, Object>> userlist = null;
		MspPlatform mspPlatform = mspPlatformService.load(Constants.ALPLATFORMID);
		String accessToken = mspPlatform.getAccessToken();
		String requestUrl = Constants.GET_DEPMEMBER_LIST_URL;
		if (StringUtil.isNotEmpty(accessToken)) {
			requestUrl = requestUrl.replace("ACCESS_TOKEN", accessToken).replace("DEPARTMENT_ID", depID)
					.replace("FETCH_CHILD", "1").replace("STATUS", "1");

			jsonObject = HttpRequestUtil.httpRequest(requestUrl, EnumMethod.GET.name(), null);

			if (jsonObject == null) {
				jsonObject = HttpRequestUtil.httpRequest(requestUrl, EnumMethod.GET.name(), null);
			}
			// 如果请求成功
			if (null != jsonObject) {

				int errcode = jsonObject.getInt("errcode");
				if (errcode == 0) {
					userlist = (List<Map<String, Object>>) jsonObject.get("userlist");

				} else {
					log.error("企业号获取某个部门下用户数据 errcode:{} errmsg:{}", jsonObject.getInt("errcode"),
							jsonObject.getString("errmsg"));

				}
			}
		} else {
			log.info("根据accesstoken企业号获取某个部门下用户数据:accessToken获取为空!");
		}
		return userlist;
	}

	/**
	 * 根据部门id获取部门下用户数据
	 * 
	 * @param req
	 * @param resp
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/web/GetDepMemberList.htm", method = { RequestMethod.POST, RequestMethod.GET })
	@ResponseBody
	public AjaxJson GetDepMemberList(HttpServletRequest req, HttpServletResponse resp) {
		String depID = req.getParameter("depID");
		if (StringUtil.isEmpty(depID)) {
			depID = "1";
		}

		AjaxJson json = new AjaxJson();

		// 根据部门id获取用户数据
		Map<String, Object> map = new HashMap<String, Object>();
		if (!"1".equals(depID)) {
			map.put("departmentId", depID);
		}

		List<MspUser> muList = mspUserService.findList(map, new PageBounds());
		if (muList != null && muList.size() > 0) {
			json.setObj(muList);
		}
		return json;
	}

	/**
	 * 同步部门下数据
	 * 
	 * @param req
	 * @param resp
	 * @return
	 */
	@RequestMapping(value = "/web/syncMemberList.htm", method = { RequestMethod.POST, RequestMethod.GET })
	@ResponseBody
	public AjaxJson syncMemberList(HttpServletRequest req, HttpServletResponse resp) {
		String depID = req.getParameter("depID");
		if (StringUtil.isEmpty(depID)) {
			depID = "1";
		}

		AjaxJson json = new AjaxJson();

		// 根据部门id获取用户数据
		Map<String, Object> map = new HashMap<String, Object>();
		if ("1".equals(depID)) {
		} else {
			map.put("departmentId", depID);
		}

		// 获取本地数据库数据
		List<MspUser> muList = mspUserService.findList(map, new PageBounds());
		if (muList != null && muList.size() > 0) {
			json.setObj(muList);
		}
		// 获取企业号数据
		List<Map<String, Object>> userlist = GetDepMemberListFromQiYe(req, resp);
		if (userlist != null && userlist.size() > 0) {
			for (Map<String, Object> user : userlist) {
				String userid = user.get("userid").toString();
				String name = user.get("name").toString();
				String department = user.get("department").toString();
				department = department.replace("[", "").replace("]", "");
				if (StringUtil.isEmpty(department)) {
					department = "1";
				}
				int size = muList.size();

				for (int i = 0; i < size; i++) {
					MspUser mspuser = muList.get(i);
					if (mspuser != null) {

						String mspUserId = mspuser.getUserId();
						String mspName = mspuser.getName();
						String mspdepartment = mspuser.getDepartmentId();
						if (userid.equals(mspUserId)) {
							// id相同,查看部门及姓名是否变化,若变化,需进行调整
							if (!name.equals(mspName) || !department.equals(mspdepartment)) {
								mspuser.setName(name);
								mspuser.setDepartmentId(department);
								mspuser.setCreateTime(new Date());
								mspUserService.update(mspuser);
							}

							muList.remove(i);
							break;
						}
					}
				}
				// 如何没有重复,则新增
				if (size == muList.size()) {

					MspUser mspUser = new MspUser();
					mspUser.setUserId(userid);
					mspUser.setId(UUIDUtil.getUUID());
					mspUser.setCreateTime(new Date());
					mspUser.setName(name);
					mspUser.setDepartmentId(department);

					mspUserService.save(mspUser);
				}

			}
		}

		return json;
	}

	
	
	/**
	 * 更新用户信息
	 * 只支持父母姓名,父母手机号编辑
	 * @param req
	 * @param resp
	 * @param mspUser
	 * @return
	 */
	@RequestMapping(value = "/web/updateUser.htm", method = { RequestMethod.POST, RequestMethod.GET })
	@ResponseBody
	public AjaxJson updateUser(HttpServletRequest req, HttpServletResponse resp, MspUser mspUser) {
		AjaxJson json = new AjaxJson();
		boolean flag = false;
		if (mspUser != null) {
			//获取用户主键id,在登录时会存入数据库
			String id = (String) req.getSession().getAttribute("id");
			flag=mspUserService.update(mspUser);
			if (!flag) {
				json.setMsg("编辑失败!");
			}
		}else{
			json.setMsg("未传递参数或参数名称不对");
		}
		json.setSuccess(flag);
		return json;
	}

}
