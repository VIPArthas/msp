package com.wh.controller.xyf;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.wh.base.AjaxJson;
import com.wh.controller.common.BaseController;
import com.wh.service.xyf.XyfChatService;
import com.wh.service.xyf.XyfUserService;
import com.wh.util.StringUtil;
import com.wh.util.UUIDUtil;
import com.wh.xyfentity.XyfChat;


/**
 * 聊天
 * 
 * @author Administrator Leo
 *
 */
@Controller
@RequestMapping("/xyf/xyfChat")
public class XyfChatController extends BaseController {
	@Resource
	private XyfUserService xyfUserService;

	@Resource
	private XyfChatService xyfChatService;
	
	private Logger log = LoggerFactory.getLogger(this.getClass());

	/**
	 * 聊一下list
	 * 已拉黑的用户不在展示
	 * @param req
	 * @param resp
	 * @return
	 */
	@RequestMapping(value = "/wx/myChatList.htm", method = { RequestMethod.POST, RequestMethod.GET })
	@ResponseBody
	public AjaxJson myChatList(HttpServletRequest req, HttpServletResponse resp) {
		AjaxJson json = new AjaxJson();
		
		String userId = (String) req.getSession().getAttribute("userId");
		//userId = "c90a07de152740a391c3f8db2bf2888e";
		if (StringUtil.isNotEmpty(userId)) {
			List<Map<String, Object>> myChatList = xyfChatService.getMyChatList(userId);
			if (myChatList != null && myChatList.size() > 0) {
				json.setObj(myChatList);
			}
		}
		return json;
	}

	/**
	 * 保存用我发送的聊天信息 参数含有toUserId,msg
	 * 
	 * @param req
	 * @param resp
	 * @return
	 */
	@RequestMapping(value = "/wx/saveChatInfo.htm", method = { RequestMethod.POST, RequestMethod.GET })
	@ResponseBody
	public AjaxJson saveChatInfo(HttpServletRequest req, HttpServletResponse resp, XyfChat xyfChat) {
		AjaxJson json = new AjaxJson();
		boolean flag = false;
		// String userId = req.getParameter("userId");
		String fromUserId = (String) req.getSession().getAttribute("userId");
		if (StringUtil.isNotEmpty(fromUserId)) {
			String id = UUIDUtil.getUUID();
			xyfChat.setId(id);
			xyfChat.setFromUserId(fromUserId);
			xyfChat.setCreateTime(new Date());
			xyfChat.setStatus(0);
			flag = xyfChatService.save(xyfChat);

		}
		json.setSuccess(flag);
		return json;
	}

	/**
	 * 获取他人发送给我的信息 JS 定时调取
	 * 
	 * @param req
	 * @param resp
	 * @param xyfChat
	 * @return
	 */
	@RequestMapping(value = "/wx/getOtherChatInfo.htm", method = { RequestMethod.POST, RequestMethod.GET })
	@ResponseBody
	public AjaxJson getOtherChatInfo(HttpServletRequest req, HttpServletResponse resp) {
		AjaxJson json = new AjaxJson();

		// 他人id
		String fromUserId = req.getParameter("fromUserId");
		//fromUserId = "9333083dd5e84ef89dfb2254a7a41234";
		// 我的id
		String toUserId = (String) req.getSession().getAttribute("userId");
		//toUserId = "9333083dd5e84ef89dfb2254a7a469fe";
		if (StringUtil.isNotEmpty(fromUserId) && StringUtil.isNotEmpty(toUserId)) {
			// 获取与我正在通话的人的未读信息
			List<Map<String, Object>> unreadChatList = xyfChatService.getUnreadChatList(fromUserId, toUserId);
			if (unreadChatList != null && unreadChatList.size() > 0) {
				json.setObj(unreadChatList);
				//更改unreadChatList信息状态    未读变已读
				xyfChatService.updateStatus(fromUserId,toUserId);
				
				return json;
			} else {
				return null;
			}
		}
		return null;
	}
	
	/**
	 * 获取最新聊天信息,不论已读,未读,只返回最后10条聊天信息
	 * @param req
	 * @param resp
	 * @return
	 */
	@RequestMapping(value = "/wx/getLastChatInfo.htm", method = { RequestMethod.POST, RequestMethod.GET })
	@ResponseBody
	public AjaxJson getLastChatInfo(HttpServletRequest req, HttpServletResponse resp) {
		AjaxJson json = new AjaxJson();

		// 他人id
		String fromUserId = req.getParameter("fromUserId");
		//fromUserId = "9333083dd5e84ef89dfb2254a7a41234";
		// 我的id
		String toUserId = (String) req.getSession().getAttribute("userId");
		//toUserId = "9333083dd5e84ef89dfb2254a7a469fe";
		if (StringUtil.isNotEmpty(fromUserId) && StringUtil.isNotEmpty(toUserId)) {
			Map<String,Object> user=new HashMap<String,Object>();
			Map<String,Object> fromUser=  xyfUserService.getUserByUserId(fromUserId);
			Map<String,Object> toUser=  xyfUserService.getUserByUserId(toUserId);
			user.put("fromUser", fromUser);
			user.put("toUser", toUser);
			
			json.setAttributes(user);
			// 获取与我正在通话的人的未读信息
			List<Map<String, Object>> lastChatList = xyfChatService.getLastChatInfo(fromUserId, toUserId);
			if (lastChatList!=null &&lastChatList.size()>0) {
				xyfChatService.updateStatus(fromUserId,toUserId);
				json.setObj(lastChatList);
			}
		}
		return json;
	}
	
	
	/**
	 * 删除他人与我的聊天信息
	 * @param req
	 * @param resp
	 * @return
	 */
	@RequestMapping(value = "/wx/deleteChatInfo.htm", method = { RequestMethod.POST, RequestMethod.GET })
	@ResponseBody
	public AjaxJson deleteChatInfo(HttpServletRequest req, HttpServletResponse resp) {
		AjaxJson json = new AjaxJson();
		boolean flag=false;
		
		// 他人id
		String fromUserId = req.getParameter("fromUserId");
		//fromUserId = "8333083dd5e84ef89dfb2254a7a41234";
		// 我的id
		String toUserId = (String) req.getSession().getAttribute("userId");
		//toUserId = "9333083dd5e84ef89dfb2254a7a469fe";
		if (StringUtil.isNotEmpty(fromUserId) && StringUtil.isNotEmpty(toUserId)) {
			flag=xyfChatService.deleteChatInfo(fromUserId,toUserId);
			json.setSuccess(flag);
		}
		
		return json;
	}
}
